{"version":3,"sources":["components/components/Card.js","components/components/CardList.js","components/components/SearchBox.js","components/components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","_ref","name","email","react_default","a","createElement","className","alt","src","concat","CardList","roboArray","robots","map","robot","components_Card","key","id","Search","props","type","onChange","handleChange","placeholder","Scroll","children","style","overflowY","height","border","marginTop","library","add","faSpinner","App","this","onRequestRobots","_this$props","searchField","isPending","filteredRobots","filter","toLowerCase","includes","SearchBox","components_Scroll","components_CardList","react_fontawesome_index_es","icon","Component","connect","state","searchRobot","requestRobotReducer","error","dispatch","e","payload","target","value","fetch","then","response","json","catch","err","initialStateSearch","initialStateRequest","logger","createLogger","store","createStore","combineReducers","arguments","length","undefined","action","Object","assign","objectSpread","applyMiddleware","thunk","ReactDOM","render","es","containers_App","document","getElementById"],"mappings":"sOAYeA,EAVF,SAAAC,GAAqB,IAAlBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,MAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BR,EAA1B,mBACrBE,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,KCWDQ,EAdE,SAAAV,GAAgB,IAEvBW,EAFuBX,EAAbY,OAESC,IAAI,SAAAC,GACzB,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKF,EAAMG,GAAIhB,KAAMa,EAAMb,KAAMC,MAAOY,EAAMZ,UAG/D,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACVK,ICDEO,EATA,SAACC,GAEZ,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OAAOC,SAAUF,EAAMG,aAAcC,YAAY,mBCI1DC,EARA,SAAAxB,GAAkB,IAAfyB,EAAezB,EAAfyB,SACd,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,QAASC,OAAQ,kBAAmBC,UAAW,SACrFL,0CCObM,IAAQC,IAAIC,KAEZ,IAgBMC,8LAEFC,KAAKhB,MAAMiB,mDAGJ,IAAAC,EACkDF,KAAKhB,MAAtDmB,EADDD,EACCC,YAAa1B,EADdyB,EACczB,OAAQ2B,EADtBF,EACsBE,UAAWjB,EADjCe,EACiCf,aAClCkB,EAAiB5B,EAAO6B,OAAO,SAAA3B,GACnC,OAAOA,EAAMb,KAAKyC,cAAcC,SAASL,EAAYI,iBAEvD,OAAQH,EAGNpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACuC,EAAD,CAAQtB,aAAcA,IACtBnB,EAAAC,EAAAC,cAACwC,EAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,CAAUlC,OAAQ4B,MANtBrC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAiBC,KAAK,mBAXVC,aAwBHC,cAxCS,SAAAC,GACtB,MAAO,CACLb,YAAaa,EAAMC,YAAYd,YAC/B1B,OAAQuC,EAAME,oBAAoBzC,OAClC2B,UAAWY,EAAME,oBAAoBd,UACrCe,MAAOH,EAAME,oBAAoBC,QAIV,SAAAC,GACzB,MAAO,CACLjC,aAAc,SAAAkC,GAAC,OAAID,EClBgB,CACrCnC,KCRiC,sBDSjCqC,QDgB6CD,EAAEE,OAAOC,SACpDvB,gBAAiB,kBAAMmB,ECdQ,SAAAA,GACjCA,EAAS,CAAEnC,KCXwB,0BDYnCwC,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAjD,GAAM,OAAI2C,EAAS,CAAEnC,KCbM,wBDauBqC,QAAS7C,MAChEoD,MAAM,SAAAC,GAAG,OAAIV,EAAS,CAAEnC,KCbO,uBDaqBqC,QAASQ,WDqCnDf,CAA6ChB,kBG/CtDgC,EAAqB,CACzB5B,YAAa,IAYT6B,EAAsB,CAC1BvD,OAAQ,GACR2B,WAAW,EACXe,MAAO,mBCbHc,SAASC,0BACTC,EAAQC,YACZC,YAAgB,CAAEpB,YDDO,WAA6C,IAA5CD,EAA4CsB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApCP,EAAoBU,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC/D,OAAQG,EAAOxD,MACb,IDb+B,sBCc7B,OAAOyD,OAAOC,OAAO,GAAI3B,EAAO,CAAEb,YAAasC,EAAOnB,UACxD,QACE,OAAON,ICJoBE,oBDcE,WAG9B,IAFHF,EAEGsB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFKN,EACRS,EACGH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADM,GAET,OAAQG,EAAOxD,MACb,ID7BiC,wBC8B/B,OAAOyD,OAAAE,EAAA,EAAAF,CAAA,GACF1B,EADL,CAEEZ,WAAW,IAEf,IDjCiC,wBCkC/B,OAAOsC,OAAAE,EAAA,EAAAF,CAAA,GACF1B,EADL,CAEEvC,OAAQgE,EAAOnB,UAEnB,IDrCgC,uBCsC9B,OAAOoB,OAAAE,EAAA,EAAAF,CAAA,GACF1B,EADL,CAEEG,MAAOsB,EAAOnB,UAElB,QACE,OAAON,MClCX6B,YAAgBZ,EAAQa,MAG1BC,IAASC,OACPhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAUd,MAAOA,GACfnE,EAAAC,EAAAC,cAACgF,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.22d5ba9c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email }) => {\r\n    return (\r\n        <div className=\"roboframe grow\">\r\n            <img alt=\"robots\" src={`https://robohash.org/${name}?size=100x100`} />\r\n            <h3>{name}</h3>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    const roboArray = robots.map(robot => {\r\n        return <Card key={robot.id} name={robot.name} email={robot.email} />\r\n    })\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            {roboArray}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Search = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" onChange={props.handleChange} placeholder=\"Search Robot\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Scroll = ({ children }) => {\r\n    return (\r\n        <div style={{ overflowY: \"scroll\", height: \"500px\", border: \"1px solid black\", marginTop: \"10px\" }}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/components/CardList.js\";\r\nimport Search from \"../components/components/SearchBox\";\r\nimport Scroll from \"../components/components/Scroll\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport \"../index\";\r\nimport \"tachyons\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nlibrary.add(faSpinner);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobot.searchField,\r\n    robots: state.requestRobotReducer.robots,\r\n    isPending: state.requestRobotReducer.isPending,\r\n    error: state.requestRobotReducer.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleChange: e => dispatch(setSearchField(e.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, robots, isPending, handleChange } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return !isPending ? (\r\n      <FontAwesomeIcon icon=\"spinner\" />\r\n    ) : (\r\n      <div className=\"main-body\">\r\n        <h2>ROBOFRIENDS</h2>\r\n        <Search handleChange={handleChange} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOT_PENDING,\r\n  REQUEST_ROBOT_SUCCESS,\r\n  REQUEST_ROBOT_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOT_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(robots => dispatch({ type: REQUEST_ROBOT_SUCCESS, payload: robots }))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOT_FAILED, payload: err }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOT_PENDING = \"REQUEST_ROBOT_PENDING\";\r\nexport const REQUEST_ROBOT_SUCCESS = \"REQUEST_ROBOT_SUCCESS\";\r\nexport const REQUEST_ROBOT_FAILED = \"REQUEST_ROBOT_FAILED\";\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOT_PENDING,\r\n  REQUEST_ROBOT_SUCCESS,\r\n  REQUEST_ROBOT_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobot = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRequest = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobotReducer = (\r\n  state = initialStateRequest,\r\n  action = {}\r\n) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOT_PENDING:\r\n      return {\r\n        ...state,\r\n        isPending: true\r\n      };\r\n    case REQUEST_ROBOT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        robots: action.payload\r\n      };\r\n    case REQUEST_ROBOT_FAILED:\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./containers/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { searchRobot, requestRobotReducer } from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport \"./index.css\";\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(\r\n  combineReducers({ searchRobot, requestRobotReducer }),\r\n  applyMiddleware(logger, thunk)\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}